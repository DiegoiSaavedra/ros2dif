# Copyright 2022 Walter Lucetti
# Licensed under the Apache License, Version 2.0

import os
from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import (
    DeclareLaunchArgument,
    LogInfo,
    OpaqueFunction,
    SetEnvironmentVariable,
)
from launch.substitutions import LaunchConfiguration, TextSubstitution
from launch_ros.actions import (
    Node,
    ComposableNodeContainer,
    LoadComposableNodes
)
from launch_ros.descriptions import ComposableNode

def launch_setup(context, *args, **kwargs):
    return_array = []

    node_ns = LaunchConfiguration('node_namespace')
    node_name = LaunchConfiguration('node_name')
    container_name = LaunchConfiguration('container_name')
    params_file = LaunchConfiguration('params_file')  # <-- NUEVO

    # Handle Parameter values
    node_namespace_val = node_ns.perform(context)
    node_name_val = node_name.perform(context)
    container_name_val = container_name.perform(context)

    if node_namespace_val != '':
        node_namespace_val = '/' + node_namespace_val

    # URDF path
    urdf_file_name = 'ldlidar_descr.urdf.xml'
    urdf = os.path.join(
        get_package_share_directory('ldlidar_node'),
        'urdf',
        urdf_file_name
    )
    with open(urdf, 'r') as infp:
        robot_desc = infp.read()

    # Robot State Publisher node
    rsp_node = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        namespace=node_ns,
        name='ldlidar_state_publisher',
        output='screen',
        parameters=[{'robot_description': robot_desc}],
        arguments=[urdf]
    )
    return_array.append(rsp_node)

    # Contenedor (si no se pasÃ³ uno)
    if container_name_val == '':
        container_name_val = 'ldlidar_container'
        distro = os.environ.get('ROS_DISTRO', '')
        container_exec = 'component_container' if distro == 'foxy' else 'component_container_isolated'

        ldlidar_container = ComposableNodeContainer(
            name=container_name_val,
            namespace=node_ns,
            package='rclcpp_components',
            executable=container_exec,
            composable_node_descriptions=[],
            output='screen',
        )
        return_array.append(ldlidar_container)

    # Composable lifecycle node del LdLidar
    ldlidar_component = ComposableNode(
        package='ldlidar_component',
        namespace=node_ns,
        plugin='ldlidar::LdLidarComponent',
        name=node_name,
        parameters=[params_file],
        # el driver publica en ~/scan (privado del nodo). Remapeamos a /scan:
        remappings=[('scan', '/scan')],
        extra_arguments=[{'use_intra_process_comms': True}],
    )


    full_container_name = node_namespace_val + '/' + container_name_val
    info = '* Loading node: ' + node_name.perform(context) + ' in container: ' + full_container_name
    return_array.append(LogInfo(msg=TextSubstitution(text=info)))

    load_composable_node = LoadComposableNodes(
        target_container=full_container_name,
        composable_node_descriptions=[ldlidar_component]
    )
    return_array.append(load_composable_node)

    return return_array


def generate_launch_description():
    # Default params file (si no se pasa, usa el del paquete)
    default_params = os.path.join(
        get_package_share_directory('ldlidar_node'),
        'params',
        'ldlidar.yaml'
    )

    return LaunchDescription([
        SetEnvironmentVariable(name='RCUTILS_COLORIZED_OUTPUT', value='1'),

        DeclareLaunchArgument(
            'node_namespace',
            default_value='',
            description='Namespace of the node'
        ),
        DeclareLaunchArgument(
            'node_name',
            default_value='ldlidar_node',
            description='Name of the node'
        ),
        DeclareLaunchArgument(
            'container_name',
            default_value='',
            description='Existing container name; if empty a new one will be created'
        ),
        # <-- NUEVO: permitimos pasar tu YAML personalizado
        DeclareLaunchArgument(
            'params_file',
            default_value=default_params,
            description='Path to the LdLidar parameters YAML'
        ),

        OpaqueFunction(function=launch_setup)
    ])

